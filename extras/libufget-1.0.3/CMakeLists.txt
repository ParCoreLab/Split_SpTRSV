PROJECT(LIBUFGET)
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
if(POLICY CMP0060)
cmake_policy(SET CMP0060 NEW)
endif()

OPTION(BUILD_SHARED_LIBS "Build shared libraries" ON)
OPTION(EXAMPLE "Build Examples" ON)

INCLUDE(GNUInstallDirs)
IF(DEFINED SYSCONFDIR)
 SET(CMAKE_INSTALL_FULL_SYSCONFDIR ${SYSCONFDIR})
ENDIF()
MESSAGE(STATUS "SYSCONFDIR: ${CMAKE_INSTALL_FULL_SYSCONFDIR}")
MESSAGE(STATUS "LIBDIR:     ${CMAKE_INSTALL_FULL_LIBDIR}")
MESSAGE(STATUS "BINDIR:     ${CMAKE_INSTALL_FULL_BINDIR}")
MESSAGE(STATUS "INCLUDEDIR: ${CMAKE_INSTALL_FULL_INCLUDEDIR}")
MESSAGE(STATUS "MANDIR:     ${CMAKE_INSTALL_FULL_MANDIR}")
MESSAGE(STATUS "Compiler_ID: ${CMAKE_C_COMPILER_ID}")
MESSAGE(STATUS "FCompiler_ID: ${CMAKE_Fortran_COMPILER_ID}")

set( CMAKE_SKIP_BUILD_RPATH FALSE)
SET(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)

list(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/CMakeModules")

SET(LIBS "m")

SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall")

#
# Find libraries
#
FIND_PACKAGE(CURL REQUIRED)
#FIND_PACKAGE(OpenSSL REQUIRED)
FIND_PACKAGE(MATIO REQUIRED)
FIND_PACKAGE(SQLITE3 REQUIRED)
FIND_PACKAGE(Archive REQUIRED)
FIND_PACKAGE(ZLIB REQUIRED)
FIND_PACKAGE(BZip2 REQUIRED)
FIND_PACKAGE(LibLZMA REQUIRED)

IF (EXAMPLE STREQUAL ON )
	ENABLE_LANGUAGE(Fortran)
	FIND_PACKAGE(BLAS REQUIRED)
ENDIF()

IF(NOT BZIP2_FOUND)
	ADD_DEFINITIONS(-DNO_BZ2)
ENDIF()
IF(NOT LIBLZMA_FOUND)
	ADD_DEFINITIONS(-DNO_XZ)
ENDIF()

INCLUDE_DIRECTORIES(${ARCHIVE_INCLUDE_DIR} ${CURL_INCLUDE_DIR} ${OPENSSL_INCLUDE_DIR} ${MATIO_INCLUDE_DIR} ${SQLITE3_INCLUDE_DIR}
	${BZIP2_INDCUDE_DIR} ${ZLIB_INCLUDE_DIR} ${LIBLZMA_INCLUDE_DIR})
	    SET(LIBS ${ARCHIVE_LIBRARIES} ${ZLIB_LIBRARIES} ${LIBLZMA_LIBRARIES} ${BZIP2_LIBRARIES} ${CURL_LIBRARIES} ${OPENSSL_LIBRARIES} ${MATIO_LIBRARIES} ${SQLITE3_LIBRARIES} ${LIBS})


SET(SRC
	src/conv.c
	src/uf_collection.c
	src/uf_matrix.c
	src/uf_query.c
	src/uf_query_pre.c
	src/uf_read.c
	src/sql.c
	src/io/io.c
	src/io/compress_handler.c
	src/io/compress_io_bzip.c
	src/io/compress_io_gzip.c
	src/io/compress_io_xz.c
	src/io/compress_io_uncompressed.c
)

ADD_LIBRARY(ufget ${SRC})
TARGET_LINK_LIBRARIES(ufget ${LIBS})
set_target_properties(ufget PROPERTIES SOVERSION "1.0.2" VERSION "1")

SET (EXAMPLE_SRC
	examples/demo_cg
	examples/demo_download_all
	examples/demo_convert_all
	)

IF (EXAMPLE STREQUAL ON )
	INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/src)
	foreach (srcfile ${EXAMPLE_SRC})
		get_filename_component(BASENAME ${srcfile} NAME_WE)
		add_executable (${BASENAME} ${srcfile}.c)
		target_link_libraries (${BASENAME} ufget ${LIBS} ${BLAS_LIBRARIES})
	endforeach (srcfile)
ENDIF()

ADD_EXECUTABLE(ufget-update src/ufget-update.c)
TARGET_LINK_LIBRARIES(ufget-update ufget)


INSTALL(TARGETS ufget LIBRARY DESTINATION ${CMAKE_INSTALL_FULL_LIBDIR} ARCHIVE DESTINATION ${CMAKE_INSTALL_FULL_LIBDIR})
INSTALL(TARGETS ufget-update RUNTIME DESTINATION ${CMAKE_INSTALL_FULL_BINDIR})

INSTALL(FILES src/libufget.h DESTINATION ${CMAKE_INSTALL_FULL_INCLUDEDIR})


### Setup PKG_CONFIG
set(prefix ${CMAKE_INSTALL_PREFIX})
set(libdir ${CMAKE_INSTALL_FULL_LIBDIR})
set(PKG_CONFIG_DIR ${CMAKE_INSTALL_FULL_LIBDIR}/pkgconfig)
set(includedir ${CMAKE_INSTALL_PREFIX}/include/)
CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/libufget.pc.in ${CMAKE_CURRENT_BINARY_DIR}/libufget.pc)
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/libufget.pc  DESTINATION ${PKG_CONFIG_DIR} )

